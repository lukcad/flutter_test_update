plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.example.flutter_test_update"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.flutter_test_update"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
        
    }
    
    // applicationVariants.all { variant ->
    //     variant.outputs.all {
    //         outputFileName = "flutter_test_update.apk"
    //     }
    // }

    flavorDimensions += "app"

    productFlavors {
        create("dev") {
            dimension = "app"
            // applicationVariants.all { dev ->
            //     dev.outputs.all {
            //         outputFileName = "flutter_test_update_dev.apk"
            //     }
            // }
            //outputFileName = "flutter_test_update_q.apk"
            //resValue(type = "string", name = "app_name", value = "flutter_test_name")
            //applicationIdSuffix = ".dev"
            resValue "string", "app_name", "flutter_test_name_dev"
        }
        create("prod") {
            dimension = "app"
            // applicationVariants.all { prod ->
            //     prod.outputs.all {
            //         outputFileName = "flutter_test_update.apk"
            //     }
            // }
            
            resValue "string", "app_name", "flutter_test_name"
            //applicationIdSuffix = ".dev"
        }
    }

    applicationVariants.all { variant ->
         variant.outputs.all {
            def productFlavorsName = productFlavors.name.toString()
            if (productFlavorsName.contains('prod')) {
                outputFileName = "flutter_test_update.apk"
            } else {
                outputFileName = "flutter_test_update_dev.apk"
            }
             
         }
    }
}

flutter {
    source = "../.."
}
